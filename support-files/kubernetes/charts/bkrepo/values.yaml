# Default values for bkrepo.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: mirrors.tencent.com/bkrepo
  pullPolicy: IfNotPresent
  # 镜像tag，默认使用appVersion
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Role Based Access
# ref: https://kubernetes.io/docs/admin/authorization/rbac/
rbac:
  # Specifies whether RBAC rules should be created
  # binding bkrepo ServiceAccount to a role
  # that allows bkrepo pods querying the K8s API
  create: true

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# ingress配置
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: "10240m"

# nginx-ingress-controller 配置
# ref: https://github.com/bitnami/charts/tree/master/bitnami/nginx-ingress-controller
nginx-ingress-controller:
  # 是否部署nginx-ingress-controller
  enabled: true
  # 镜像registry地址
  image:
    registry: docker.io
  defaultBackend:
    enabled: false

# mongodb charts配置
# ref: https://github.com/bitnami/charts/tree/master/bitnami/mongodb
mongodb:
  # 是否部署mongodb
  enabled: true
  # 镜像registry地址
  image:
    registry: docker.io
  fullnameOverride: bkrepo-mongodb
  architecture: standalone
  auth:
    enabled: true
    database: bkrepo
    username: bkrepo
    password: bkrepo

# 数据持久化配置, 当使用filesystem方式存储时需要配置
# ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
persistence:
  # 是否开启数据持久化，false则使用emptyDir类型volume, pod结束后数据将被清空，无法持久化
  enabled: true
  accessModes:
    - ReadWriteOnce
  size: 100Gi

  # 指定storageClass
  # 如果设置为"-", 则禁用动态卷供应
  # 如果不定义或设置为null, 将使用默认的storageClass(minikube上是hostPath, AWS上的gp2, GKE上是standard)
  # storageClass: "-"

  # 如果开启持久化并且定义了该项，则绑定k8s集群中已存在的pvc
  # existingClaim: my-persistent-volume-claim

  # 如果开启持久化，并且没有任何上述配置，将使用动态卷供应方式提供存储，使用storageClass定义的存储类。在删除该声明后，这个卷也会被销毁。
  # ref: https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/

# 数据初始化job配置
jobs:
  # 是否初始化mongodb数据，支持幂等执行
  initMongodb: true

# bkrepo公共配置
common:
  # jvm启动选项, 如-Xms1024M -Xmx1024M
  jvmOption: ""
  # SpringBoot active profile
  springProfile: dev
  # 初始用户名
  username: admin
  # 初始用户密码
  password: blueking
  # mongodb连接信息
  mongodb:
    # mongodb 标准连接字符串
    uri: mongodb://bkrepo:bkrepo@bkrepo-mongodb:27017/bkrepo
  # bkrepo存储配置
  storage:
    # 指定存储类型，支持filesystem/cos/s3/hdfs
    type: filesystem
    # filesystem配置，使用文件系统
    filesystem:
      path: /data/storage
    ## 腾讯云cos存储配置
    #cos:
    ## 标准s3对象存储
    #s3:
    ## hdfs存储配置
    #hdfs:

# 网关配置
gateway:
  # bkrepo gateway service配置
  service:
    type: ClusterIP
    # 服务类型为`ClusterIP`时端口设置
    port: 80
    # 服务类型为`NodePort`时端口设置 
    nodePort: 30000
  # k8s replicaCount 配置，下同
  replicaCount: 1
  # k8s resources 配置，下同
  resources: {}
  # k8s tolerations 配置，下同
  tolerations: []
  # k8s affinity 配置，下同
  affinity: {}
  # bkrepo 地址
  host: bkrepo.com
  # dns服务器地址，用于配置nginx resolver。local=on为openrestry语法，取本机/etc/resolv.conf配置
  dnsServer: local=on
  # 网关访问微服务认证信息
  authorization: "Platform MThiNjFjOWMtOTAxYi00ZWEzLTg5YzMtMWY3NGJlOTQ0YjY2OlVzOFpHRFhQcWs4NmN3TXVrWUFCUXFDWkxBa00zSw=="
  # 部署模式，standalone: 独立模式，ci: 与ci搭配模式
  deployMode: standalone

# 仓库服务配置
repository:
  replicaCount: 1
  resources: {}
  tolerations: []
  affinity: {}
  config:
    # 节点被删除后多久清理数据
    deletedNodeReserveDays: 15

# 认证服务配置
auth:
  replicaCount: 1
  resources: {}
  tolerations: []
  affinity: {}
  config:
    # 指定realm类型，支持local/devops
    realm: local

# generic服务配置
generic:
  enabled: true
  replicaCount: 1
  resources: {}
  tolerations: []
  affinity: {}
  config: {}

# docker registry服务配置
docker:
  enabled: false
  replicaCount: 1
  resources: {}
  tolerations: []
  affinity: {}
  config: {}

# npm registry服务配置
npm:
  enabled: false
  replicaCount: 1
  resources: {}
  tolerations: []
  affinity: {}
  config: {}

# pypi registry服务配置
pypi:
  enabled: false
  replicaCount: 1
  resources: {}
  tolerations: []
  affinity: {}
  config: {}

# helm registry服务配置
helm:
  enabled: false
  replicaCount: 1
  resources: {}
  tolerations: []
  affinity: {}
  config: {}
