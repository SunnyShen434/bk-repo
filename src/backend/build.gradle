buildscript {
    ext {
        kotlinVersion = '1.3.31'
        springBootVersion = '2.1.5.RELEASE'
        springCloudVersion = 'Greenwich.SR2'

        ktlintVersion = "0.34.2"
        swaggerCoreVersion = "1.5.22"
        swaggerFoxVersion = "2.9.2"
        commonsCodecVersion = "1.10"
        jasyptVersion = "2.1.2"
        awsS3Version = "1.11.631"
        guavaVersion = "28.1-jre"
    }

    repositories {
        mavenLocal()
        maven { url MAVEN_REPO_URL }
        // for inner sdk
        maven { url MAVEN_SNAPSHOT_REPO_URL }
        maven { url "https://repo.spring.io/libs-milestone" }
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    }
}

allprojects {
    group "com.tencent.bkrepo"
    version "0.1.0-SNAPSHOT"

    repositories {
        mavenLocal()
        maven { url MAVEN_REPO_URL }
        // for inner cos sdk
        maven { url MAVEN_SNAPSHOT_REPO_URL }
        maven { url "https://repo.spring.io/libs-milestone" }
        mavenCentral()
        jcenter()
    }

}

subprojects {
    apply plugin: "java"
    apply plugin: "kotlin"
    apply plugin: "kotlin-spring"
    apply plugin: 'org.springframework.boot'
    apply plugin: "io.spring.dependency-management"
    apply plugin: "maven-publish"


    def isBootProject = project.name.startsWith("boot-")

    jar.enabled = !isBootProject
    bootJar.enabled = isBootProject
    bootRun.enabled = isBootProject


    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    tasks.withType(JavaCompile).all {
        options.encoding = "UTF-8"
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    tasks.withType(Test).all {
        useJUnitPlatform()
    }


    configurations {
        ktlint
        all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
        all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
        all*.exclude group: "org.apache.tomcat", module: "tomcat-jdbc"
        all*.exclude group: "org.slf4j", module: "log4j-over-slf4j"
        all*.exclude group: "org.slf4j", module: "slf4j-log4j12"
        all*.exclude group: "org.slf4j", module: "slf4j-nop"
    }

    dependencies {
        ktlint "com.pinterest:ktlint"

        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        implementation "org.jetbrains.kotlin:kotlin-reflect"
        implementation "org.springframework.boot:spring-boot-configuration-processor"

        testImplementation("org.springframework.boot:spring-boot-starter-test") {
            exclude module: "junit"
        }
        testImplementation("org.junit.jupiter:junit-jupiter-api")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    }

    task ktlint(type: JavaExec, group: "verification") {
        description = "Check Kotlin code style."
        main = "com.pinterest.ktlint.Main"
        classpath = configurations.ktlint
        args "src/**/*.kt", "!src/**/*Test.kt"
        // see https://github.com/pinterest/ktlint#usage for more
    }
    check.dependsOn ktlint

    task ktlintFormat(type: JavaExec, group: "formatting") {
        description = "Fix Kotlin code style deviations."
        main = "com.pinterest.ktlint.Main"
        classpath = configurations.ktlint
        args "-F", "src/**/*.kt", "!src/**/*Test.kt"
    }


    dependencyManagement {
        dependencies {
            imports {
                mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
            }
            dependency "com.pinterest:ktlint:$ktlintVersion"
            dependency "io.swagger:swagger-annotations:$swaggerCoreVersion"
            dependency "io.swagger:swagger-models:$swaggerCoreVersion"
            dependency "io.springfox:springfox-swagger2:$swaggerFoxVersion"
            dependency "commons-codec:commons-codec:$commonsCodecVersion"
            dependency "com.github.ulisesbocchio:jasypt-spring-boot-starter:$jasyptVersion"
            dependency "com.amazonaws:aws-java-sdk-s3:$awsS3Version"
            dependency "com.google.guava:guava:$guavaVersion"
            
        }

    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId project.group
                artifactId project.name
                version project.version
                from components.java
            }
        }
        repositories {
            maven {
                if (project.version.endsWith('-SNAPSHOT')) {
                    url = MAVEN_SNAPSHOT_REPO_DEPLOY_URL
                    
                    credentials {
                        username MAVEN_SNAPSHOT_REPO_USERNAME
                        password MAVEN_SNAPSHOT_REPO_PASSWORD
                    }
                } else {
                    url = MAVEN_REPO_DEPLOY_URL=

                    credentials {
                        username MAVEN_REPO_USERNAME
                        password MAVEN_REPO_PASSWORD
                    }
                }

            }
        }
    }
    
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}